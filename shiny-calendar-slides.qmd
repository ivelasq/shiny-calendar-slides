---
title: "Using pins for Shiny with ever-changing data"
subtitle: "End-to-end workflow with Posit Team"
date: 2024-08-28
title-slide-attributes: 
  data-background-color: white
  background-transition: fade
  highlight-style: zenburn
  data-background-image: _extensions/jthomasmock/positslides/assets/backgrounds/sample-title-slide-option-1.png
  data-background-size: contain
format:
  positslides-revealjs: 
    width: "1600"
    height: "900"
---

## Today's project

![](images/calendar.png){fig-align="center"}

## Workflow {background-image="images/workflow.png" background-size="contain"}

## Pulling data from an API {.smaller}

* Pulling from an API can be done with `requests` in Python or {httr2} in R

````{.md filename="data-pull.Rmd"}
```{{python}}
import requests
from requests.auth import HTTPBasicAuth
import json

username = "ivelasq@gmail.com"
api_key = r.api_key

social_url = "https://ivelasq.atlassian.net/rest/api/3/search?jql=project%20=%20KAN%20AND%20text%20~%20%22\%22social\%22%22"

social_results = get_response_from_url(social_url, username, api_key)
```
````

* In R, we can then convert the results into a dataframe using {jsonlite}

````{.md filename="data-pull.Rmd"}
```{{r}}
dat_json <-
 py$social_results |>
 jsonlite::fromJSON()
 
/* Clean final data here */
```
````

. . .

<br>

How can we keep the results up to date?

## Enter pins

<br>
<br>

:::: {.columns}

::: {.column width="40%"}
![](images/pins.png){fig-align="center"}
:::

::: {.column width="60%"}
* The pins package publishes data, models, and other R objects
* You can pin objects to a variety of pin boards
* You can use pins from Python as well as R
:::

::::

## Using pins

Create a file for connecting to a board and writing a pin:

````{.md filename="data-pull.qmd" code-line-numbers="1-8|10|12-16"}
```{{r}}
board <-
  pins::board_connect(
    auth = "manual",
    server = Sys.getenv("CONNECT_SERVER"),
    key = Sys.getenv("CONNECT_API_KEY")
  )
```

/* Data pull and cleaning goes here */

```{{r}}
pins::pin_write(board = board,
                x = pin_dat,
                name = "isabella.velasquez/pin_dat")
```
````

Read a pin:

```{.r filename="file.R"}
pin_dat <-
  pins::pin_read(name = "isabella.velasquez/pin_dat",
                 board = board)
```

## Updating pins

Schedule refreshes of pins on Posit Connect:

![](images/schedule.gif){fig-align="center"}

## Shiny

Shiny is a framework for creating web applications using R code.

![](images/shiny.png){fig-align="center"}

## Shiny and reactivity {.smaller}

Shiny uses the reactive programming model. 

* Allows the app to automatically update outputs whenever the underlying data or user inputs change
* Reactive expressions automatically re-execute when their dependencies change
* Trigger actions in response to changes in reactive values

See how the greeting updates automatically as you type:

![](images/reactivity.gif){fig-align="center"}

. . .

How can we do this with data?

## Enter `pin_reactive_read()`

`pin_reactive_read()` wraps the results of `pin_read()` into a Shiny reactive.

* Use pinned data within your app
* Have the results automatically recompute when the pin is modified

Use it like so:

```{.r filename="app.R"}
pin_reactive_read(board, name, interval = 5000)
```

. . .

<br>

Let's see it in action!

